// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
@import ObjectiveC;
@import CoreLocation;
@import MessageUI;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("GenericApp")
@class UIWindow;
@class UIApplication;

SWIFT_CLASS("_TtC10GenericApp11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITapGestureRecognizer;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC10GenericApp6BaseVC")
@interface BaseVC : UIViewController
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// Override this method to get an event, when the user changes the textSize in the System Preferences during this viewcontroller is on screen
/// \param notification the notification object from the OS
///
- (void)contentSizeCategoryDidChange:(NSNotification * _Nonnull)notification;
/// Override this method to get an event, when the app comes to the foreground
/// (e.g. to deselect the selected tablerow, which lead to the external browser)
/// \param notification the notification object from the OS
///
- (void)appWillEnterForegroundNotification:(NSNotification * _Nonnull)notification;
- (void)keyboardWillChangeFrame:(NSNotification * _Nonnull)notification;
- (void)hideKeyboardIfPresent:(UITapGestureRecognizer * _Nonnull)recognizer;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIGestureRecognizer;
@class UITouch;

@interface BaseVC (SWIFT_EXTENSION(GenericApp)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextField;

@interface BaseVC (SWIFT_EXTENSION(GenericApp)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
@end

@class TVRefreshControl;

@interface BaseVC (SWIFT_EXTENSION(GenericApp))
- (void)handleRefresh:(TVRefreshControl * _Nonnull)refreshControl;
@end



@class UITextView;

@interface BaseVC (SWIFT_EXTENSION(GenericApp)) <UITextViewDelegate>
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)url inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC10GenericApp20ButtonWithGradientBG")
@interface ButtonWithGradientBG : UIButton
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This subclass of UIButton centers the button label below the button image.
/// It will be recalculated on layoutSubviews, so a title change will update the margins
/// NOTE, that in IB this will not appear correctly, as layoutSubviews() is not called for @IBDesignables
SWIFT_CLASS("_TtC10GenericApp19CenteredLabelButton")
@interface CenteredLabelButton : UIButton
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC10GenericApp12GradientView")
@interface GradientView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull foregroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10GenericApp19LayerPropertiesView")
@interface LayerPropertiesView : UIView
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) CGFloat shadowRadius;
@property (nonatomic) float shadowOpacity;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

SWIFT_CLASS("_TtC10GenericApp15LocationManager")
@interface LocationManager : NSObject <CLLocationManagerDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end

@class TextViewWithPlaceholder;
@class UILabel;

/// MultilineTextEditorVC controls a simple view with an editable TextView
/// The TextView supports a placeholder and also optionally
/// a maximum number of allowed characters, if the instance variable
/// ‘maximumNumberOfCharactersAllowed’ is defined
SWIFT_CLASS("_TtC10GenericApp21MultilineTextEditorVC")
@interface MultilineTextEditorVC : BaseVC
@property (nonatomic, weak) IBOutlet TextViewWithPlaceholder * _Null_unspecified textView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified statusText;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




/// Simple “cover view” to darken the whole view and display an activity indictor and block all UI
/// This view is used to block all UI in a modal way during an asynchronous task,
/// which shall force the user to wait for the completion. Not all asynchronous tasks
/// really need to block further UI, but some taks must first be completed before the user
/// can proceed. For that case bring up this OverlayView using the “showActivityIndicator()”
/// method, which is common to all ViewControllers inheriting from BaseVC (all VCs of this app)
/// Always use showActivityIndicator() to show the overlay and animate the activity indicator
/// and to set or change the status message. Calling showActivityIndicator() while the overlay
/// is showing just updates the message text.
/// Use hideActivityIndicator() to dismiss the overlay and return control back to the user
/// So to use this class refer to ActivityIndicatorExtension.swift
SWIFT_CLASS("_TtC10GenericApp11OverlayView")
@interface OverlayView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class UIPanGestureRecognizer;

/// @IBDesignable control for a “star rating” control
/// The single “stars” can be provided as images ()so the control doesn’t necessarly need to be a star control) OR, in case no image is provided, the image for the stars is created using a bezierpath (This requires the extension “BezierPath+COAdditions.swift”)
SWIFT_CLASS("_TtC10GenericApp10RatingView")
@interface RatingView : UIControl
/// Number of stars
/// - returns: Integer
@property (nonatomic) NSInteger numberOfStars;
/// Current rating value (normalized)
/// *  Range: from 0.0 to 1.0
/// - returns: Double
@property (nonatomic) double currentRating;
/// Image object for the star artwork
/// - returns: UIImage
@property (nonatomic, strong) UIImage * _Nullable staticStarImage;
/// Size of the star image (in case it is automatically generated from a bezierpath)
/// - returns: CGFloat
@property (nonatomic) CGFloat starSize;
/// Whether the current rating value is user editable (tap and swipe) or read-only
/// - returns: Bool
@property (nonatomic) BOOL editable;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)sizeToFit;
- (void)tapOnView:(UITapGestureRecognizer * _Nonnull)recognizer;
- (void)panOnView:(UIPanGestureRecognizer * _Nonnull)recognizer;
@end


/// Present RequestPermissionVCHandler to ask user about permissions
/// This is entirely generic, caller can set Title, Body, Ok- and Cancelbutton label text
/// The buttons just call the provided closure, nothong else.
/// Caller is responsible for bringing the viewcontroller up and dismissing it
/// Example:
/// \code
///    let dlog = RequestPermissionVC.initWithMessage(
///        "Accessing your location allows us to sort the stores by disance",
///        title: "Why enable Location Services?",
///        okButtonLabel: "Ok, proceed",
///        cancelButtonLabel: "Cancel") { rslt in
///
///        if rslt == .OK {
///            dismissViewControllerAnimated(true) {
///                // do your "Ok" action here
///                // or do the "Ok" action and THEN dismiss the viewController
///            }
///        }
///        else {
///            // do your "cancel" action here
///            dismissViewControllerAnimated(true, completion: nil)
///        }
///    }
///    presentViewController(dlog, animated: true, completion: nil)
///
/// \endcode
SWIFT_CLASS("_TtC10GenericApp19RequestPermissionVC")
@interface RequestPermissionVC : BaseVC
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified okButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified cancelButton;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified explanationText;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified explanationTitleLabel;
- (void)viewDidLoad;
- (IBAction)cancelButtonTapAction:(UIButton * _Nonnull)sender;
- (IBAction)onButtonTapAction:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10GenericApp14StandardButton")
@interface StandardButton : UIButton
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)wasPressed;
- (void)wasReleased;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nullable pressedColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
@property (nonatomic) CGFloat titleSoftShadowRadius;
@property (nonatomic) CGFloat softShadowRadius;
@property (nonatomic) float titleSoftShadowOpacity;
@property (nonatomic) float softShadowOpacity;
@property (nonatomic, strong) UIColor * _Nullable titleSoftShadowColor;
@property (nonatomic, strong) UIColor * _Nullable softShadowColor;
@property (nonatomic) BOOL withShadow;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10GenericApp16TVRefreshControl")
@interface TVRefreshControl : UIRefreshControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSAttributedString;
@class NSTextContainer;

/// 1.) Use the Runtime Variables in the Storyboard for the placeholder text
/// 2.) Set the delegate of this textView to a class which handles the following delegate calls:
/// 3a.) Either subclass “BaseVC”
/// or
/// 3b.) implement the following delegate calls in your delegate:
/// // MARK: - textview delegate to handle placeholder
/// \code
/// func textViewDidBeginEditing(textView:UITextView) {
/// if let textViewWithPlaceholder = textView as? TextViewWithPlaceholder {
/// textViewWithPlaceholder.constrainSelectionIfNeccessary()
/// }
/// }
///
/// \endcode\code
/// func textViewDidChangeSelection(textView:UITextView) {
/// if let textViewWithPlaceholder = textView as? TextViewWithPlaceholder {
/// textViewWithPlaceholder.constrainSelectionIfNeccessary()
/// }
/// }
///
/// \endcode\code
/// func textView(textView:UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {
/// if let textViewWithPlaceholder = textView as? TextViewWithPlaceholder
/// where textViewWithPlaceholder.isShowingPlaceholder() {
/// textView.text = text
/// return false
/// }
/// }
/// return true
/// }
///
/// \endcode\code
/// func textViewDidChange(textView:UITextView) {
/// if let textViewWithPlaceholder = textView as? TextViewWithPlaceholder {
/// textViewWithPlaceholder.showPlaceholderTextIfNeccessary()
/// }
/// }
///
/// \endcodeIMPORTANT NOTE:
/// A subclass of BaseVC doesn’t need to implement these, BUT in case it implements those methods for other purposes, it must forward the call to super in order for this class to work as expected
SWIFT_CLASS("_TtC10GenericApp23TextViewWithPlaceholder")
@interface TextViewWithPlaceholder : UITextView
@property (nonatomic, copy) NSString * _Nonnull placeholder;
@property (nonatomic, strong) UIColor * _Nonnull placeholderTextColor;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=7.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end











































@class MFMailComposeViewController;

@interface UIViewController (SWIFT_EXTENSION(GenericApp)) <MFMailComposeViewControllerDelegate>
- (void)mailComposeController:(MFMailComposeViewController * _Nonnull)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC10GenericApp14ViewController")
@interface ViewController : UIViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerContextTransitioning;

SWIFT_CLASS("_TtC10GenericApp22ZoomNavigationAnimator")
@interface ZoomNavigationAnimator : NSObject <UIViewControllerAnimatedTransitioning>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
